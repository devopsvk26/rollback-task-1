name: Publish and Deploy MyApp

on:
  release:
    types: [published]

jobs:
  push_to_registry:
    name: Push Docker image to Docker Hub
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: read
      attestations: write
      id-token: write
    steps:
      - name: Check out the repo
        uses: actions/checkout@v4

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: my-docker-hub-namespace/myapp

      - name: Build and push Docker image
        id: push
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile-v2
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@v2
        with:
          subject-name: index.docker.io/my-docker-hub-namespace/myapp
          subject-digest: ${{ steps.push.outputs.digest }}
          push-to-registry: true

  deploy:
    name: Deploy Application
    runs-on: ubuntu-latest
    needs: push_to_registry
    steps:
      - name: Setup SSH Key
        run: |
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa

      - name: Deploy Application
        run: |
          ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no user@your-server-ip << 'EOF'
            set -e
            docker pull my-docker-hub-namespace/myapp:${{ steps.meta.outputs.tags }}
            docker run -d --name myapp-v2 -p 5001:5000 my-docker-hub-namespace/myapp:${{ steps.meta.outputs.tags }} || exit 1
            sed -i 's/5000/5001/g' /etc/nginx/sites-available/default
            nginx -s reload
            sleep 10
            curl -f http://localhost:5001 || (docker stop myapp-v2 && docker rm myapp-v2 && exit 1)
            docker stop myapp-v1
            docker rm myapp-v1
            docker rename myapp-v2 myapp-v1
          EOF
        continue-on-error: true

      - name: Rollback on Failure
        if: failure()
        run: |
          ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no user@your-server-ip << 'EOF'
            docker stop myapp-v2 || true
            docker rm myapp-v2 || true
            sed -i 's/5001/5000/g' /etc/nginx/sites-available/default
            nginx -s reload
          EOF

      - name: Notify Slack on Failure
        if: failure()
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_MESSAGE: "Deployment failed! Keeping the previous version running."
          SLACK_COLOR: "danger"
